//
//  LearnViewController.m
//  HelloMyWords
//
//  Created by junfengyang on 15/5/27.
//  Copyright (c) 2015年 HSChinese iOS Team. All rights reserved.
//

#import "LearnViewController.h"
#import "UIView+Additions.h"
#import "AnimateHelper.h"

// 各种的Cell，每一个学习主题对应一种cell。
#import "LearnCollectionViewCell.h"
#import "SinglePhoneCell.h"
#import "DoublePhoneCell.h"
#import "ExciseFirstCell.h"
#import "ExciseSecondCell.h"
#import "VowelsCell.h"
#import "SyllableCell.h"
#import "ConsonantsCell.h"
#import "ExciseCell.h"
// 数据管理部分
#import "Store.h"
#import "Record.h"
#import "ImportOperation.h"
#import "FetchedResultsCollectionDataSource.h"
// 进度条
#import "LDProgressView.h"
#import "SVProgressHUD.h"

#define kItemWidth [UIScreen mainScreen].bounds.size.width*0.9
#define kItemHeight [UIScreen mainScreen].bounds.size.height-69-103

#define kMinimumLineSpacing 36.0f
#define kMinimumInteritemSpacing 16.0f

#define kSectionNumber 8
#define kItemNumberPerSection 2

@interface LearnViewController ()<UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>

@property (nonatomic, strong) UIButton *btnTQuit;
@property (nonatomic, strong) UIButton *btnTNex;
@property (nonatomic, readwrite) LearnCheckPointType type;
@property (nonatomic, strong) FetchedResultsCollectionDataSource* dataSource;
@property (nonatomic, strong) NSIndexPath *curPath;

// 使用collectionView来加载待学习以及测试的界面.
//  -- 一个section表示一个关卡。
//  -- 每一个关卡下面的cell都是一种自定义的样式。
//  -- 每一个关卡内的cell都是可以重用的。
@property (nonatomic, strong) UICollectionViewFlowLayout *flowLayout;
@property (nonatomic, strong) UICollectionView *collectionView;
// 判断是否第一次加载当前页面，如果是，那么会有启动动画，如果不是，那么不会有启动动画。
@property (nonatomic, getter=isFirstLaunch) BOOL firstLaunch;

// 进度条视图
@property (nonatomic) UIView * popCircle;
@property (nonatomic) LDProgressView *progressView;

@end

@implementation LearnViewController
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil learnType:(LearnCheckPointType)aType
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {
        _type = aType;
    }
    return self;
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self layoutViewsAppear];
    
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.view.backgroundColor = [UIColor clearColor];
    self.firstLaunch = YES;
    
    NSDictionary *cellIdentifiers = @{@(0):@"SinglePhoneCell", @(1):@"ExciseFirstCell", @(2):@"DoublePhoneCell", @(3):@"ExciseSecondCell", @(4):@"VowelsCell", @(5):@"ConsonantsCell", @(6):@"SyllableCell", @(7):@"ExciseCell"};
    
    NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"Record"];
    fetchRequest.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@"learnType" ascending:YES], [NSSortDescriptor sortDescriptorWithKey:@"weight" ascending:YES]];
    
    NSFetchedResultsController *fetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.store.mainManagedObjectContext sectionNameKeyPath:@"learnType" cacheName:nil];
    self.dataSource = [[FetchedResultsCollectionDataSource alloc] initWithCollectionView:self.collectionView cellIdentifiers:cellIdentifiers fetchedResultsController:fetchedResultsController];
    LearnViewController *weakSelf = self;
    self.dataSource.configureCellBlock = ^(UICollectionViewCell *cell, Record *item, NSIndexPath *indexPath)
    {
        [weakSelf configureCell:cell item:item indexPath:indexPath];
    };
    
    self.collectionView.dataSource = self.dataSource;
    self.collectionView.delegate   = self;
    
    NSIndexPath *path = [NSIndexPath indexPathForItem:0 inSection:self.type];
    [self.collectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:NO];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)configureCell:(UICollectionViewCell *)aCell item:(Record *)item indexPath:(NSIndexPath *)indexPath
{
    LearnCollectionViewCell *cell = (LearnCollectionViewCell *)aCell;
    cell.record = item;
    
    // 当前种类的点击进来的，如果是第一个，那么需要使用动画重新排布一下界面。
    if (indexPath.section == self.type && indexPath.item == 0 && self.isFirstLaunch)
    {
        self.firstLaunch = NO;
        [((LearnCollectionViewCell *)cell) prepareForAppearLayout];
    }
    
    self.curPath = indexPath;
    self.type = indexPath.section;
}

- (CGFloat)progressOfAudioKnowledgeLearn
{
    CGFloat progress;
    NSInteger sections = self.collectionView.numberOfSections;
    if (sections > self.curPath.section)
    {
        NSInteger items = [self.collectionView numberOfItemsInSection:self.curPath.section];
        progress = (CGFloat)(self.curPath.item+1.0) / (CGFloat)items;
    }
    
    return progress;
}

#pragma mark - relayout Subviews
- (void)layoutViewsAppear
{
    CGFloat progressCenterY = 59;
    CGFloat btnQuitCenterY = 58;
    CGFloat btnNexCenterY = [UIScreen mainScreen].bounds.size.height-46;
    
    if (self.animation)
    {
        [AnimateHelper transitionView:self.btnTQuit fromCenter:self.btnTQuit.center toCenter:CGPointMake(self.btnTQuit.centerX, btnQuitCenterY) duration:0.6 delay:0.2 completion:^(BOOL finished) {}];
        [AnimateHelper transitionView:self.btnTNex fromCenter:self.btnTNex.center toCenter:CGPointMake(self.btnTNex.centerX, btnNexCenterY) duration:0.6 delay:0.2 completion:^(BOOL finished) {}];
        [AnimateHelper transitionView:self.progressView fromCenter:self.progressView.center toCenter:CGPointMake(self.progressView.centerX, progressCenterY) duration:0.6 delay:0.2 completion:^(BOOL finished) {
            self.progressView.progress = [self progressOfAudioKnowledgeLearn];
        }];
        LearnCollectionViewCell *cell = (LearnCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:self.curPath];
        [cell layoutSubviewsAppear];
        
    }
    else
    {
        self.progressView.centerY = progressCenterY;
        self.btnTQuit.centerY = btnQuitCenterY;
        self.btnTNex.centerY  = btnNexCenterY;
        self.collectionView.alpha = 1;
    }
}

- (void)layoutViewsDisAppear
{
    CGFloat btnQuitCenterY = -30;
    CGFloat progressCenterY = -30;
    CGFloat btnNextCenterY = [UIScreen mainScreen].bounds.size.height+23;
    if (self.animation)
    {
        [AnimateHelper transitionView:self.btnTQuit fromCenter:self.btnTQuit.center toCenter:CGPointMake(self.btnTQuit.centerX, btnQuitCenterY) duration:0.6 completion:nil];
        [AnimateHelper transitionView:self.btnTNex fromCenter:self.btnTNex.center toCenter:CGPointMake(self.btnTNex.centerX, btnNextCenterY) duration:0.3 completion:nil];
        [AnimateHelper transitionView:self.progressView fromCenter:self.progressView.center toCenter:CGPointMake(self.progressView.centerX, progressCenterY) duration:0.6 completion:nil];
        
        LearnCollectionViewCell *cell = (LearnCollectionViewCell *)[self.collectionView cellForItemAtIndexPath:self.curPath];
        [cell layoutSubviewsDisappear];

    }
    else
    {
        self.progressView.centerY = btnQuitCenterY;
        self.btnTQuit.centerY = btnQuitCenterY;
        self.btnTNex.centerY  = btnNextCenterY;
        self.collectionView.alpha = 0;
    }
}

#pragma mark - Action Manager
- (IBAction)quitAction:(id)sender
{
    [SVProgressHUD dismiss];
    
    self.view.backgroundColor = [UIColor clearColor];
    
    [self layoutViewsDisAppear];
    
    if (self.delegate && [self.delegate respondsToSelector:@selector(learnQuit:)])
    {
        [self.delegate learnQuit:self];
    }
}

- (void)nextActtion:(id)sender
{
    NSInteger totalCount = 0;
    NSInteger curCount = 0;
    
    NSInteger sections = self.collectionView.numberOfSections;
    
    for (NSInteger i = 0; i < sections; i++)
    {
        NSInteger items = [self.collectionView numberOfItemsInSection:i];
        totalCount += items;
        
        if (i < self.curPath.section)
        {
            NSInteger items = [self.collectionView numberOfItemsInSection:i];
            curCount += items;
        }
    }
    curCount += self.curPath.item;
    NSInteger nexIndex = curCount+1;
    
    CGRect rect = CGRectMake(nexIndex*kItemWidth, 0, kItemWidth, kItemHeight);
    [self.collectionView scrollRectToVisible:rect animated:YES];
    
    self.progressView.progress = [self progressOfAudioKnowledgeLearn];
    
    [SVProgressHUD dismiss];
}


-(void)performTransactionAnimation
{
    /*
    [self.popCircle pop_removeAllAnimations];
    
    //Config progress line
    
    CAShapeLayer *progressLayer = [CAShapeLayer layer];
    progressLayer.strokeColor = [UIColor colorWithRed:0.16 green:0.72 blue:1.0 alpha:1.0].CGColor;
    progressLayer.lineCap   = kCALineCapRound;
    progressLayer.lineJoin  = kCALineJoinBevel;
    progressLayer.lineWidth = 26.0;
    progressLayer.strokeEnd = 0.0;
    
    UIBezierPath *progressline = [UIBezierPath bezierPath];
    [progressline moveToPoint:CGPointMake(13.0, 13.0)];
    [progressline addLineToPoint:CGPointMake(800.0, 13.0)];
    progressLayer.path = progressline.CGPath;
    
    [self.popCircle.layer addSublayer:progressLayer];
    
    POPSpringAnimation *scaleAnim = [POPSpringAnimation animationWithPropertyNamed:kPOPLayerScaleXY];
    scaleAnim.springBounciness = 5;
    scaleAnim.springSpeed = 12;
    scaleAnim.toValue = [NSValue valueWithCGPoint:CGPointMake(0.3, 0.3)];
    
    POPSpringAnimation *boundsAnim = [POPSpringAnimation animationWithPropertyNamed:kPOPLayerBounds];
    boundsAnim.springBounciness = 10;
    boundsAnim.springSpeed = 2;
    boundsAnim.toValue = [NSValue valueWithCGRect:CGRectMake(0, 0, 800, 26)];
    
    boundsAnim.completionBlock = ^(POPAnimation *anim, BOOL finished) {
        if (finished)
        {
            UIGraphicsBeginImageContextWithOptions(self.popCircle.frame.size, NO, 0.0);
            POPBasicAnimation *progressBoundsAnim = [POPBasicAnimation animationWithPropertyNamed:kPOPShapeLayerStrokeEnd];
            progressBoundsAnim.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
            progressBoundsAnim.duration = 1.0;
            progressBoundsAnim.fromValue = @0.0;
            progressBoundsAnim.toValue = @0.4;
            
            [progressLayer pop_addAnimation:progressBoundsAnim forKey:@"AnimateBounds"];
            progressBoundsAnim.completionBlock = ^(POPAnimation *anim, BOOL finished) {
                if (finished) {
                    UIGraphicsEndImageContext();
                }
            };
        }
    };
    
    [self.popCircle.layer pop_addAnimation:boundsAnim forKey:@"AnimateBounds"];
    [self.popCircle.layer pop_addAnimation:scaleAnim forKey:@"AnimateScale"];
     */
}

#pragma mark - UIScrollView Delegate
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView
{
//    DLOG_CMETHOD;
    UICollectionView *collectionView = (UICollectionView *)scrollView;
    LearnCollectionViewCell *cell = [[collectionView visibleCells] lastObject];
    [cell playSourceAudio];
//
//    NSIndexPath *indexPath = [[collectionView indexPathsForVisibleItems] lastObject];
//    self.curPath = indexPath;
//    self.type = indexPath.section;
}

#pragma mark - UICollectionView Delegate
//- (void)collectionView:(UICollectionView *)collectionView willDisplayCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath
//{
//    
//}

//- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath
//{
//    DLOG_CMETHOD;
//}

#pragma mark - 属性
- (UIButton *)btnTQuit
{
    if (!_btnTQuit)
    {
        _btnTQuit = [[UIButton alloc] initWithFrame:CGRectMake(8, -30, 46, 30)];
        [_btnTQuit setTitleColor:kColor00Background forState:UIControlStateNormal];
        _btnTQuit.titleLabel.font = [UIFont systemFontOfSize:18];
        //[_btnTQuit setTitle:@"退出" forState:UIControlStateNormal];
        [_btnTQuit setImage:[UIImage imageNamed:@"back-arrow"] forState:UIControlStateNormal];
        [_btnTQuit setImage:[UIImage imageNamed:@"back-arrow"] forState:UIControlStateHighlighted];
        [_btnTQuit addTarget:self action:@selector(quitAction:) forControlEvents:UIControlEventTouchUpInside];
        [self.view addSubview:_btnTQuit];
    }
    return _btnTQuit;
}

- (UIButton *)btnTNex
{
    if (!_btnTNex)
    {
        _btnTNex = [[UIButton alloc] initWithFrame:CGRectMake(0, [UIScreen mainScreen].bounds.size.height, [UIScreen mainScreen].bounds.size.width*0.9, 50)];
        _btnTNex.backgroundColor = RGB(19, 153, 238);
        _btnTNex.centerX = [UIScreen mainScreen].bounds.size.width*0.5;
        _btnTNex.titleLabel.font = [UIFont systemFontOfSize:18];
        [_btnTNex setTitle:@"下一步" forState:UIControlStateNormal];
        [_btnTNex setTitleColor:kColorFFBackground forState:UIControlStateNormal];
        _btnTNex.layer.cornerRadius = self.btnTNex.height * 0.05;
        [_btnTNex addTarget:self action:@selector(nextActtion:) forControlEvents:UIControlEventTouchUpInside];
        [self.view addSubview:_btnTNex];
    }
    return _btnTNex;
}

- (UICollectionViewFlowLayout *)flowLayout
{
    if (!_flowLayout) {
        if (kiOS7_OR_LATER) {
            _flowLayout = [[UICollectionViewFlowLayout alloc] init];
        }else{
            _flowLayout = [[UICollectionViewFlowLayout alloc] init];
        }
        
        _flowLayout.itemSize = CGSizeMake(kItemWidth-_flowLayout.minimumInteritemSpacing, kItemHeight);
        // 头上到边框的距离。设置这个之后每一个cell就居中了。
        UIEdgeInsets edge = {0, _flowLayout.minimumInteritemSpacing*0.5, 0, _flowLayout.minimumInteritemSpacing*0.5};
        _flowLayout.sectionInset = edge;
        // 滚动方向
        [_flowLayout setScrollDirection:UICollectionViewScrollDirectionHorizontal];
    }
    return _flowLayout;
}

- (UICollectionView *)collectionView
{
    if (!_collectionView)
    {
        CGRect frame = CGRectMake(0, 83, kItemWidth, kItemHeight);
        _collectionView = [[UICollectionView alloc] initWithFrame:frame collectionViewLayout:self.flowLayout];
        _collectionView.centerX         = [UIScreen mainScreen].bounds.size.width*0.5;
        _collectionView.pagingEnabled   = YES;
//        _collectionView.scrollEnabled   = NO;
        _collectionView.scrollsToTop    = NO;
        _collectionView.backgroundColor = self.view.backgroundColor;
        
        UINib *nibSinglePhone = [UINib nibWithNibName:@"SinglePhoneCell" bundle:nil];
        [_collectionView registerNib:nibSinglePhone forCellWithReuseIdentifier:@"SinglePhoneCell"];
        UINib *nibDoublePhone = [UINib nibWithNibName:@"DoublePhoneCell" bundle:nil];
        [_collectionView registerNib:nibDoublePhone forCellWithReuseIdentifier:@"DoublePhoneCell"];
        UINib *nibExciseFirst = [UINib nibWithNibName:@"ExciseFirstCell" bundle:nil];
        [_collectionView registerNib:nibExciseFirst forCellWithReuseIdentifier:@"ExciseFirstCell"];
        UINib *nibExciseSecond = [UINib nibWithNibName:@"ExciseSecondCell" bundle:nil];
        [_collectionView registerNib:nibExciseSecond forCellWithReuseIdentifier:@"ExciseSecondCell"];
        UINib *nibVowels = [UINib nibWithNibName:@"VowelsCell" bundle:nil];
        [_collectionView registerNib:nibVowels forCellWithReuseIdentifier:@"VowelsCell"];
        UINib *nibSyllable = [UINib nibWithNibName:@"SyllableCell" bundle:nil];
        [_collectionView registerNib:nibSyllable forCellWithReuseIdentifier:@"SyllableCell"];
        UINib *nibConsonants = [UINib nibWithNibName:@"ConsonantsCell" bundle:nil];
        [_collectionView registerNib:nibConsonants forCellWithReuseIdentifier:@"ConsonantsCell"];
        UINib *nibExcise = [UINib nibWithNibName:@"ExciseCell" bundle:nil];
        [_collectionView registerNib:nibExcise forCellWithReuseIdentifier:@"ExciseCell"];
        [self.view addSubview:_collectionView];
    }
    return _collectionView;
}

- (UIView *)popCircle
{
    if (!_popCircle)
    {
        _popCircle = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 26, 26)];
        _popCircle.layer.transform = CATransform3DIdentity;
        [_popCircle.layer setMasksToBounds:YES];
        [_popCircle.layer setBackgroundColor:[UIColor colorWithRed:0.72 green:0.72 blue:0.72 alpha:1.0].CGColor];
        [_popCircle.layer setCornerRadius:13.0f];
        [_popCircle setBounds:CGRectMake(0.0f, 0.0f, 26.0f, 26.0f)];
        [self.view addSubview:_popCircle];
    }
    return _popCircle;
}

- (LDProgressView *)progressView
{
    if (!_progressView)
    {
        _progressView = [[LDProgressView alloc] initWithFrame:CGRectMake(60, -11, [UIScreen mainScreen].bounds.size.width-100, 11)];
        _progressView.color = RGB(9, 152, 238);
        _progressView.flat = @YES;
        _progressView.showText = @NO;
        [self.view addSubview:_progressView];
    }
    return _progressView;
}

- (void)setCurPath:(NSIndexPath *)curPath
{
    _curPath = curPath;
    self.progressView.progress = [self progressOfAudioKnowledgeLearn];
}

@end
